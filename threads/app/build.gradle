/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/8.0.1/userguide/building_java_projects.html
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'java'
    id 'application'
}

java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(19))
    }
}

compileJava {
   // https://docs.gradle.org/8.0.1/dsl/org.gradle.api.tasks.compile.CompileOptions.html#org.gradle.api.tasks.compile.CompileOptions:release
    options.compilerArgs.add("--enable-preview")
//    options.compilerArgs.add("-Xlint:preview")
}

compileTestJava {
    options.compilerArgs.add("--enable-preview")
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // Use JUnit test framework.
    testImplementation 'junit:junit:4.13.2'

    // This dependency is used by the application.
    implementation 'com.google.guava:guava:31.1-jre'
}

application {
    // Define the main class for the application.
    mainClass = 'cs.App'
}

tasks.withType(JavaExec).configureEach {
    jvmArgs.add("--enable-preview")
}

task startEchoServer(type:Exec) {
    workingDir '.'
    commandLine 'docker',  'run', '-d', '--name', 'echo-server', '-p', '8080:8080', '-p', '8443:8443', '--rm',  '-t',  'mendhak/http-https-echo:28'
}

task stopEchoServer(type:Exec) {
    workingDir '.'
    commandLine 'docker', 'stop', 'echo-server'
}